@{
    ViewData["Title"] = "Messages";
    var SelectedTrainerId = ViewBag.SelectedTrainerId as string;
    Layout = null;
}

<meta name="viewport" content="width=device-width, initial-scale=1" />

<style>
    body, html {
        height: 100%;
        margin: 0;
        font-family: 'Poppins', Arial, sans-serif;
        background-color: #f2f1f6;
    }

    .chat-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        width: 100vw;
        background: white;
        box-shadow: 0 1px 5px rgba(0,0,0,0.1);
        margin: 0;
    }

    .chat-header {
        position: relative; /* for absolute child */
        padding: 15px;
        background: linear-gradient(90deg, #2051f1, #2093f1);
        color: white;
        font-weight: 700;
        font-size: 18px;
        text-align: center;
    }

    /* Back button style */
    .back-button {
        position: absolute;
        left: 15px;
        top: 50%;
        transform: translateY(-50%);
        background: transparent;
        border: none;
        color: white;
        font-weight: 700;
        font-size: 16px;
        cursor: pointer;
        padding: 5px 10px;
        border-radius: 8px;
        transition: background-color 0.3s ease;
    }

        .back-button:hover {
            background-color: rgba(255,255,255,0.2);
        }

    .messages {
        flex: 1;
        padding: 10px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 10px;
        background-color: #e5e5ea;
    }

    .message {
        max-width: 75%;
        padding: 10px 15px;
        border-radius: 20px;
        font-size: 14px;
        line-height: 1.3;
    }

        .message.sent {
            align-self: flex-end;
            background-color: #2051f1;
            color: white;
            border-bottom-right-radius: 5px;
        }

        .message.received {
            align-self: flex-start;
            background-color: #fff;
            color: #333;
            border-bottom-left-radius: 5px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

    .chat-input-container {
        display: flex;
        padding: 10px;
        background: #fafafa;
        border-top: 1px solid #ddd;
    }

    .chat-input {
        flex: 1;
        border: 1px solid #ccc;
        border-radius: 20px;
        padding: 10px 15px;
        font-size: 16px;
        outline: none;
    }

    .send-button {
        background-color: #2051f1;
        border: none;
        color: white;
        font-weight: bold;
        padding: 10px 15px;
        margin-left: 8px;
        border-radius: 20px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .send-button:hover {
            background-color: #1041c1;
        }

    /* Responsive font sizes for mobile */
    @@media (max-width: 480px) {
        .chat-header

    {
        font-size: 22px;
        padding: 20px;
    }

    .message {
        font-size: 18px;
        padding: 14px 20px;
    }

    .chat-input {
        font-size: 18px;
        padding: 12px 20px;
    }

    .send-button {
        padding: 12px 20px;
        font-size: 16px;
    }

    }
</style>

<body>
<div class="chat-container">
    <div class="chat-header">
        <form method="get" action="@Url.Action("Index", "Client", new { area = "Client" })" style="display:inline;">
            <button type="submit" class="back-button" aria-label="Back to Client Area">&larr; Back</button>
        </form>
        Chat with your Trainer
    </div>

        <div class="messages" id="messages">
            @Html.AntiForgeryToken()
    </div>

    <form id="chatForm" class="chat-input-container" method="post" asp-controller="Chat" asp-action="SendMessage">
        <input type="hidden" name="receiverId" value="@SelectedTrainerId" />
        <input type="text" name="message" class="chat-input" placeholder="Type a message..." autocomplete="off" required />
        <button type="submit" class="send-button">Send</button>
    </form>
</div>


    @using System.Security.Claims
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const chatForm = document.getElementById('chatForm');
            const messageInput = chatForm.querySelector('input[name="message"]');
            const chatBox = document.getElementById('messages');
            const receiverIdInput = chatForm.querySelector('input[name="receiverId"]');

            if (!chatForm) return;

            const currentUserId = '@User.FindFirstValue(ClaimTypes.NameIdentifier)';

            function formatMessage(message) {
                const isCurrentUser = message.senderId === currentUserId;

                const messageClass = isCurrentUser ? 'sent' : 'received';
                return `
                    <div class="message ${messageClass}">
                        ${message.text}
                    </div>
                `;
            }

            async function loadMessages() {
                const receiverId = receiverIdInput.value;
                if (!receiverId) return;

                try {
                    const response = await fetch(`/Chat/GetMessages?receiverId=${encodeURIComponent(receiverId)}`);
                    if (!response.ok) throw new Error('Failed to load messages');

                    const messages = await response.json();
                    chatBox.innerHTML = '';

                    messages.forEach(msg => {
                        chatBox.innerHTML += formatMessage({
                            senderId: msg.senderId,
                            text: msg.text
                        });
                    });

                    chatBox.scrollTop = chatBox.scrollHeight;
                } catch (err) {
                    console.error('Error loading messages:', err);
                }
            }

            chatForm.addEventListener('submit', async (e) => {
                e.preventDefault();

                const receiverId = receiverIdInput.value;
                const text = messageInput.value.trim();
                if (!text || !receiverId) return;

                try {
                    const response = await fetch('/Chat/SendMessage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        },
                        body: JSON.stringify({ receiverId, messageText: text })
                    });

                    if (!response.ok) throw new Error('Failed to send message');

                    messageInput.value = '';
                    messageInput.focus();
                    loadMessages();
                } catch (err) {
                    console.error('Error sending message:', err);
                    alert('Failed to send message. Try again.');
                }
            });

            function getAntiForgeryToken() {
                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                return tokenElement ? tokenElement.value : '';
            }

            // Initial load and periodic refresh
            loadMessages();
            setInterval(loadMessages, 10000);
        });
    </script>



</body>