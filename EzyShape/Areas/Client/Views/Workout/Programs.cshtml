@model ClientWorkoutViewModel
@Html.AntiForgeryToken()


@{
    ViewData["Title"] = "My Programs | Personal Trainer Software for Professionals";
    Layout = null;
}

@using Microsoft.AspNetCore.Identity
@using EzyShape.Infrastructure.Data.Models

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EzyShape | Personal Trainer Software for Professionals</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="~/css/normalize.css">
    <link rel="stylesheet" href="~/css/Client/allWorkouts.css">
    <link rel="stylesheet" href="~/css/Client/bottomNavigation.css">
    <link rel="stylesheet" href="~/css/Client/workoutModal.css">
</head>
<body>

    <!-- Header -->
    <header class="app-header">
        <p>Training</p>
        <div class="sub-nav-div">

            <button class="suv-nav-button sub-active">
                <i class="fa-solid fa-dumbbell"></i>
                Programs
            </button>

            <button class="suv-nav-button">
                <i class="fa fa-history" aria-hidden="true"></i>
                History
            </button>

        </div>
    </header>

    <main>
        <div class="programs-div div-active">

            @foreach (var split in Model.Splits)
            {
                <div class="split-container container" data-id="@split.Id   ">
                    <div class="container-texts-div">
                        <div class="workout-name-div">
                            <p class="workout-name-text">
                                @split.Name
                            </p>
                        </div>
                        <div class="workout-info-div">
                            <i class="fa-solid fa-circle-info"></i>
                        </div>
                    </div>
                </div>
            }
        </div>


        <div class="history-div">
            History
        </div>

    </main>


    <!-- Bottom Navigation -->
    <nav class="bottom-nav">
        <a asp-area="Client" asp-controller="Client" asp-action="Index" class="nav-item">
            <i class="icon-home">
                <i class="fa-solid fa-house"></i>
            </i>
        </a>
        <a href="#" class="nav-item active"><i class="icon-nutrition"><i class="fa-solid fa-dumbbell"></i></i></a>

        <a href="#" class="nav-item"><i class="icon-water"><i class="fa-solid fa-chart-line"></i></i></a>


        <a asp-area="Client" asp-controller="Client" asp-action="Profile" class="nav-item">
            <i class="icon-settings"></i>
            <i class="fa-solid fa-user"></i>
        </a>


    </nav>
    <div id="splitPartialWrapper">

    </div>




    <script src="~/js/toggleTrainingSubNavigation.js" asp-append-version="true"></script>
    <script>
            function closeModal() {
            const modal = document.getElementById('workoutModal');
            if (modal) {
                modal.remove();  // This will completely remove the modal and its content from the DOM
            }
            document.body.style.overflow = 'auto'; // Restore scroll
        }
    </script>

    <script>

    </script>
    
    <script>
        function enableWorkoutSlider() {
            const slider = document.querySelector('.modal-slider');
            const slides = document.querySelectorAll('.concrete-workout-container');
            let currentIndex = 0;

            function goToSlide(index) {
                if (!slider || slides.length === 0) return;
                index = Math.max(0, Math.min(slides.length - 1, index));
                slider.style.transform = `translateX(-${index * 100}vw)`;
                currentIndex = index;
            }

            // Left/Right arrow key navigation
            document.addEventListener('keydown', (e) => {
                if (document.getElementById('workoutModal').style.display !== 'none') {
                    if (e.key === 'ArrowRight') {
                        goToSlide(currentIndex + 1);
                    } else if (e.key === 'ArrowLeft') {
                        goToSlide(currentIndex - 1);
                    }
                }
            });

            // Optional: Swipe support (for touch devices)
            let startX = 0;
            slider.addEventListener('touchstart', (e) => {
                startX = e.touches[0].clientX;
            });

            slider.addEventListener('touchend', (e) => {
                const endX = e.changedTouches[0].clientX;
                if (startX - endX > 50) {
                    goToSlide(currentIndex + 1);
                } else if (endX - startX > 50) {
                    goToSlide(currentIndex - 1);
                }
            });
        }

        // Ensure the script runs AFTER the partial is loaded
        document.querySelectorAll('.split-container').forEach(container => {
            container.addEventListener('click', () => {
                const splitId = container.dataset.id.trim();

                fetch(`/Client/Workout/GetSplitWorkoutsPartial?id=${encodeURIComponent(splitId)}`)
                    .then(response => {
                        if (!response.ok) throw new Error('Failed to load partial');
                        return response.text();
                    })
                    .then(html => {
                        const wrapper = document.getElementById('splitPartialWrapper');
                        wrapper.innerHTML = html;
                        wrapper.style.display = 'block';

                        // Activate slider after content is injected
                        enableWorkoutSlider();
                    })
                    .catch(err => {
                        console.error('Error loading partial:', err);
                    });
            });
        });
    </script>



</body>
</html>